import os
from building import *

cwd = GetCurrentDir()

Import('asenv')
ASROOT = asenv['ASROOT']

print('qemu run command:scons versatilepb run\nqemu debug command: scons versatilepb run gdb')
if('run' in COMMAND_LINE_TARGETS):
    if(os.name == 'nt'):
        qemu = 'C:/msys64/mingw64/bin/qemu-system-arm.exe'
        if(not os.path.exists(qemu)):
            qemu = '%s/release/download/asqemu/qemu-system-arm.exe'%(ASROOT)
            if(not os.path.exists(qemu)):
                RunCommand('cd %s/release/download && '
                           'wget https://github.com/parai/asenv/raw/master/x64/asqemu.zip && '
                           'unzip asqemu.zip'%(ASROOT))
    else:
        qemu = '%s/release/download/qemu/arm-softmmu/qemu-system-arm'%(ASROOT)
    target = '%s/release/%s/versatilepb'%(ASROOT,asenv['RELEASE'])
    if(os.name == 'nt'): target = target + '.exe'
    if((not os.path.exists(qemu)) and (os.name != 'nt')):
        RunCommand('cd %s/release/ascore/ && make asqemu'%(ASROOT))

    build = '%s/release/%s/build/versatilepb'%(ASROOT,asenv['RELEASE'])

    if(not os.path.exists('%s/asblk0.img'%(build))):
        if(os.name == 'nt'):
            RunCommand('echo "0" > %s/asblk0.img && truncate -s 33554432 %s/asblk0.img'%(build,build))
        else:
            RunCommand('dd if=/dev/zero of=%s/asblk0.img bs=1M count=32'%(build))
            RunCommand('sudo mkfs.fat %s/asblk0.img'%(build))
    if(not os.path.exists('%s/asblk1.img'%(build))):
        if(os.name == 'nt'):
            RunCommand('echo "0" > %s/asblk1.img && truncate -s 33554432 %s/asblk1.img'%(build,build))
        else:
            RunCommand('dd if=/dev/zero of=%s/asblk1.img bs=1M count=32'%(build))
            RunCommand('sudo mkfs.ext4 -b 4096 %s/asblk1.img'%(build))

    params = '-nographic -serial tcp:127.0.0.1:1103,server'
    params += ' -device pci-ascan -device pci-asnet -device pci-asblk'
    if('gdb' in COMMAND_LINE_TARGETS):
        params += ' -gdb tcp::1234 -S'
    if(os.name == 'nt'):
        RunCommand('start %s/com/as.tool/lua/can/socketwin_can_driver.exe 0'%(ASROOT))
        RunCommand('start %s/com/as.tool/lua/can/socketwin_can_driver.exe 1'%(ASROOT))
        RunCommand('cd %s && start %s -m 128 -M versatilepb -kernel %s %s'%(build,qemu,target,params))
        RunCommand('sleep 1 && telnet 127.0.0.1 1103')
    else:
        fp.write('sleep 0.5\ntelnet 127.0.0.1 1103\n')
        fp.close()
        fp = open('%s/qemu.sh'%(build),'w')
        fp.write('%s -m 128 -M versatilepb -kernel %s %s & sh %s/telnet.sh'%(qemu,target,params,build))
        fp.close()
        RunCommand('sudo pgrep qemu-system-arm | xargs -i kill -9 {}')
        RunCommand('cd %s && chmod +x %s/*.sh && sudo gnome-terminal -x %s/qemu.sh'%(build,build,build))
    exit(0)

objs = []

objs += Glob('%s/../board.bcm2835/common/*.c'%(cwd))

asenv.Append(CCFLAGS=' -I%s/../board.bcm2835/common '%(cwd))
if(asenv['RELEASE']=='asboot'):
    asenv.Append(CCFLAGS=' -DconfigTOTAL_HEAP_SIZE=0x8000 ')
else:
    asenv.Append(CCFLAGS=' -DconfigTOTAL_HEAP_SIZE=0x800000 ')
asenv.Append(CCFLAGS=' -DMEMORY_SIZE=0x8000000 ')
asenv.Append(CCFLAGS=' -DSYSTEM_REGION_START=0x10000000 ')
asenv.Append(CCFLAGS=' -DSYSTEM_REGION_END=0x101f4000 ')
asenv.Append(CCFLAGS=' -DPAGE_SIZE=0x1000 ')

if(asenv['RELEASE']=='asboot'):
    lds = '%s/../board.bcm2835/script/linker-boot.lds'%(cwd)
else:
    lds = '%s/../board.bcm2835/script/linker-app.lds'%(cwd)
if(asenv['RTOS'] == 'rtthread'):
    lds = '%s/versatilepb.lds'%(cwd)
asenv.Append(LINKFLAGS=' -static -T %s '%(lds))
asenv.Append(LINKFLAGS='-Map build/versatilepb/versatilepb.map')

MODULES = ['ECUM','SCHM','MCU',
           'DET',
           'CAN','CANIF','PDUR','COM','COMM','CANTP','CANNM',
           'DCM','CANNM','CANSM','NM','OSEKNM','XCP',
           'SOAD','DOIP','LWIP','PCI',
           ]

if(asenv['RTOS'] != 'rtthread'):
    MODULES += ['FATFS','LWEXT4',
           'CLIB_ASHEAP','CLIB_MISCLIB',
           'CLIB_MBOX','CLIB_QSORT',
           'CLIB_STDIO_PRINTF',
           ]
    if(os.name == 'nt'):
        MODULES.remove('FATFS')
        MODULES.remove('LWEXT4')
else:
    asenv.Append(CCFLAGS='-DRT_HEAP_SIZE=0x800000')
    MODULES += ['LWEXT4']

ARCH='versatilepb'
arch='arm'

# post special process for asboot release
if(asenv['RELEASE']=='asboot'):
    MODULES = ['ECUM','SCHM','MCU','DET',
               'CAN','CANIF','PDUR','CANTP',
               'DCM',
               'FLASH',
               'PCI',
               'CLIB_ASHEAP','CLIB_MISCLIB',
               'CLIB_STDIO_PRINTF',
               ]

asenv['MODULES'] = MODULES
asenv['ARCH'] = ARCH
asenv['arch'] = arch

Return('objs')
