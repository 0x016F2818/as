import os
from building import *

Import('asenv')
MODULES=asenv['MODULES']
ASROOT=asenv['ASROOT']

cwd = GetCurrentDir()

objs = []

if(asenv['RTOS'] != 'rtthread'):
    objs += Glob('bsp/*.c')
else:
    objs += Glob('rtbsp/*.c')
    objs += Glob('bsp/pci.c')
    asenv.Append(CCFLAGS='-I%s/rtbsp'%(cwd))
    asenv.Append(ASFLAGS='-I%s/rtbsp'%(cwd))

if('CAN' in MODULES):
    objs += Glob('mcal/Can.c')
    asenv.Append(CCFLAGS='-DUSE_CAN')

if('LCD' in MODULES):
    objs += Glob('mcal/Lcd.c')
    asenv.Append(CCFLAGS='-DUSE_LCD')

if('MCU' in MODULES):
    objs += Glob('mcal/Mcu.c')
    asenv.Append(CCFLAGS='-DUSE_MCU')

if('LWIP' in MODULES):
    objs += Glob('../stm32f1/lwip/netbios.c')

if(('LWIP' in MODULES) and (asenv['RTOS'] != 'rtthread')):
    objs += Glob('../posix/lwip/sys_arch.c')
    asenv.Append(CCFLAGS=' -I%s/../stm32f1/lwip '%(cwd))
    if(os.name == 'nt'):
        asenv.Append(CCFLAGS='-DLWIP_TIMEVAL_PRIVATE=0')

asenv.Append(CCFLAGS=' -std=gnu99 -O0 -g ')
asenv.Append(ASFLAGS=' -g ')

asenv.Append(CCFLAGS=' -mcpu=arm926ej-s -marm -fpic ')
asenv.Append(ASFLAGS=' -mcpu=arm926ej-s -marm -fpic ')
asenv.Append(CCFLAGS=' -I%s/bsp -I%s/mcal '%(cwd,cwd))
asenv['CC']='arm-none-eabi-gcc'
asenv['AS']='arm-none-eabi-as'
asenv['LINK']='arm-none-eabi-ld'

asenv['S19'] = 'arm-none-eabi-objcopy -O srec --srec-forceS3 --srec-len 32'

asenv.Append(CCFLAGS='-ffunction-sections -fdata-sections')
asenv.Append(LINKFLAGS='--gc-sections')

asenv.Append(LIBS=['c','gcc'])

if(os.name == 'nt'):
    gccarm = 'gcc-arm-none-eabi-5_4-2016q3-20160926-win32'
    gccsrc= 'https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/%s.zip'%(gccarm)
    cpl = '%s/release/download/%s'%(ASROOT,gccarm)
    if(not os.path.exists(cpl)):
        RunCommand('cd %s/release/download && wget %s && mkdir -p %s && cd %s && unzip ../%s.zip'%(ASROOT,gccsrc,gccarm,gccarm,gccarm))
    asenv.Append(LIBPATH=['%s/lib/gcc/arm-none-eabi/5.4.1'%(cpl)])
    asenv.Append(LIBPATH=['%s/arm-none-eabi/lib'%(cpl)])
    asenv['CC']='%s/bin/arm-none-eabi-gcc'%(cpl)
    asenv['AS']='%s/bin/arm-none-eabi-gcc -c'%(cpl)
    asenv['LINK']='%s/bin/arm-none-eabi-ld'%(cpl)
    asenv['S19'] = '%s/bin/%s'%(cpl,asenv['S19'])
else:
    # FIXME to the right path
    libgcc = '/usr/lib/gcc/arm-none-eabi/4.8.2'
    assert(os.path.exists(libgcc))
    asenv.Append(LIBPATH=[libgcc,'/usr/lib/arm-none-eabi/newlib'])

Return('objs')
