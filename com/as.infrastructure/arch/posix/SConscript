import os
from building import *

Import('asenv')
MODULES=asenv['MODULES']
ASROOT=asenv['ASROOT']

cwd = GetCurrentDir()

objs = []

if('CAN' in MODULES):
    objs += Glob('mcal/Can.c')
    asenv.Append(CCFLAGS='-DUSE_CAN')

if('DIO' in MODULES):
    objs += Glob('mcal/Dio.c')
    asenv.Append(CCFLAGS='-DUSE_DIO')

if('FATFS' in MODULES):
    objs += Glob('mcal/diskio.c')

if('EEP' in MODULES):
    objs += Glob('mcal/Eep.c')
    asenv.Append(CCFLAGS='-DUSE_EEP')

if('FLASH' in MODULES):
    objs += Glob('mcal/Flash.c')
    asenv.Append(CCFLAGS='-DUSE_FLASH')

if('FLS' in MODULES):
    objs += Glob('mcal/Fls.c')
    asenv.Append(CCFLAGS='-DUSE_FLS')

if('IPC' in MODULES):
    objs += Glob('mcal/Ipc.c')
    asenv.Append(CCFLAGS='-DUSE_IPC')

if('LCD' in MODULES):
    objs += Glob('mcal/Lcd.c')
    asenv.Append(CCFLAGS='-DUSE_LCD')

if('MCU' in MODULES):
    objs += Glob('mcal/Mcu.c')
    asenv.Append(CCFLAGS='-DUSE_MCU')

if('PORT' in MODULES):
    objs += Glob('mcal/Port.c')
    asenv.Append(CCFLAGS='-DUSE_PORT')

if('STMO' in MODULES):
    objs += Glob('mcal/Stmo.c')
    asenv.Append(CCFLAGS='-DUSE_STMO')

if('LWIP' in MODULES):
    download = '%s/release/download'%(ASROOT)
    lwip='%s/lwip-contrib'%(download)

    if(not os.path.exists(lwip)):
        MKDir(download)
        RunCommand('''cd %s && git clone git://git.savannah.nongnu.org/lwip/lwip-contrib.git && 
            cd lwip-contrib && git checkout STABLE-1_4_1'''%(download))
        RunCommand('sed -i "22c #include <ddk/ntddndis.h>" %s/lwip-contrib/ports/win32/pcapif_helper.c'%(download))

    MKSymlink(lwip,'%s/lwip-contrib'%(cwd))
    asenv.Append(CCFLAGS='-I%s/lwip'%(cwd))
    if(os.name == 'nt'):
        objs += Glob('lwip-contrib/ports/win32/pcapif.c')
        #objs += Glob('lwip-contrib/ports/win32/pcapif_helper.c')
        asenv.Append(CCFLAGS='-DPCAPIF_HANDLE_LINKSTATE=0')
        asenv.Append(CCFLAGS='-DUSE_PCAPIF')
        objs += Glob('lwip-contrib/ports/win32/sys_arch.c')
        MKSymlink('%s/lwip-contrib/ports/win32/include/arch/sys_arch.h'%(cwd),
                  '%s/lwip/lwip_sys_arch.h'%(cwd))
        MKSymlink('%s/lwip-contrib/ports/win32/lwipcfg_msvc.h.example'%(cwd),
                  '%s/lwip-contrib/ports/win32/lwipcfg_msvc.h'%(cwd))
    else:
        objs += Glob('lwip-contrib/ports/unix/sys_arch.c')
        MKSymlink('%s/lwip-contrib/ports/unix/include/arch/sys_arch.h'%(cwd),
                  '%s/lwip/lwip_sys_arch.h'%(cwd))
        objs += Glob('lwip/tapif.c')
    objs += Glob('lwip/sys_arch.c')
    objs += Glob('lwip-contrib/apps/httpserver/*.c')
    objs += Glob('../stm32f1/lwip/netbios.c')

    if(os.name == 'nt'):
        pcap='%s/WpdPack'%(download)
        if(not os.path.exists(pcap)):
            RunCommand('''cd %s && wget https://www.winpcap.org/install/bin/WpdPack_4_1_2.zip &&
                unzip WpdPack_4_1_2.zip'''%(download))
        MKSymlink(pcap,'%s/WpdPack'%(cwd))
        asenv.Append(CCFLAGS='-I%s/WpdPack/Include'%(cwd))
        asenv.Append(LIBS=['packet','wpcap'])
        asenv.Append(LIBPATH=['%s/WpdPack/Lib'%(cwd)])
        if('-D_MSC_VER' not in asenv['CCFLAGS']):
            asenv.Append(CCFLAGS='-D_MSC_VER')

asenv.Append(CCFLAGS='-D__AS_CAN_BUS__')
asenv.Append(CCFLAGS='-I%s/com/as.infrastructure/communication/RPmsg'%(asenv['ASROOT']))

objs += SConscript('%s/com/as.tool/lua/SConscript'%(asenv['ASROOT']))

if('GTK' in MODULES):
    asenv.ParseConfig('%s --cflags gtk+-3.0'%(asenv['pkgconfig']))
    asenv.ParseConfig('%s --libs gtk+-3.0 glib-2.0 gthread-2.0'%(asenv['pkgconfig']))
    asenv.Append(CCFLAGS='-DGUI_USE_GTK')
    if('-pthread' in asenv['CCFLAGS']):
        asenv['CCFLAGS'].remove('-pthread')
    if('-pthread' in asenv['LINKFLAGS']):
        asenv['LINKFLAGS'].remove('-pthread')
    if('-pthread' in asenv['LINKFLAGS']):
        asenv['LINKFLAGS'].remove('-pthread')
    if('dwmapi' in asenv['LIBS']):
        asenv['LIBS'].remove('dwmapi')
elif('OPENVG' in MODULES):
    asenv.Append(CCFLAGS='-I%s/openvg'%(cwd))

asenv.Append(LIBS=['pthread','stdc++','m'])

if(os.name == 'nt'):
    asenv.Append(LIBS=['wsock32'])
    asenv.Append(CCFLAGS='-D__WINDOWS__')
else:
    asenv.Append(CCFLAGS='-D__LINUX__')

asenv.Append(CCFLAGS='-std=gnu99')
asenv.Append(CCFLAGS='-O0')
asenv.Append(CCFLAGS='-g')

asenv.Append(CCFLAGS='-I%s/mcal'%(cwd))

Return('objs')
